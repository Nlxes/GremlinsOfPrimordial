//ver=2
BaseMaterial<
				parent=Unigine::mesh_transparent
				guid=95d5a1fcc86e952b0aaea88ed4541695ba4076f0
				manual=false
				
			>
{
	// optimization
	State static_shadow = false
	
Texture2DArray "8f0b1da8df486a941a5f2a91917ef4deff3baa5b"="guid://df7a5f2766dedfe11a5f2a91917ef4deff3baa5b" <shader_name="8f0b1da8df486a941a5f2a91917ef4deff3baa5b" editable=false wrap=[repeat_x repeat_y repeat_z ]>
	Texture2D <source=linear_depth>
	Texture2D <source=screen_color_old_reprojection>
Group "Parameters"
{
Slider "roughness"=0.000000 < min=0 max=1 shader_name="var_4b93d8479cb2d112283ef34d1b437d234adde333">
}
	State emission = true
	Option blend_src5
	Option blend_dest6
	State gbuffer = true
	Option depth_mask = false

	
	Shader vertex_struct =
	#{
		INIT_BASE_DATA
		INIT_USER_DATA(float3, global_var_1ef54606f6729c15f0c1cc8c36839aab613b28a0)

		INIT_USER_DATA(float3, DATA_VERTEX_POSITION)
		MODIFIER_NOINTERPOLATION INIT_USER_DATA(float4x4, DATA_TRANSFORM)
		MODIFIER_NOINTERPOLATION INIT_USER_DATA(float4x4, DATA_ITRANSFORM)
		MODIFIER_NOINTERPOLATION INIT_USER_DATA(float3x3, DATA_OBJECT_ROTATION)
		
		MODIFIER_NOINTERPOLATION INIT_USER_DATA(uint, DATA_INSTANCE_ID)
		MODIFIER_NOINTERPOLATION INIT_USER_DATA(uint, DATA_VERTEX_ID)
	#}
	
	Shader common =
	#{
		#include <core/materials/shaders/render/graph/common.h>
		#ifdef FRAGMENT
			#include <core/materials/shaders/api/common.h>
			#include <core/materials/shaders/render/graph/base.h>
			#include <core/materials/shaders/render/graph/common.h>
			
			void _add_call_graph_wrapper(float in0,float in1,out float out0)
			{
				out0 = _add(in0,in1);
			
			}
			void _add_call_graph_wrapper(float3 in0,float3 in1,out float3 out0)
			{
				out0 = _add(in0,in1);
			
			}
			void _add_call_graph_wrapper(int in0,int in1,out int out0)
			{
				out0 = _add(in0,in1);
			
			}
			void _dot_product_call_graph_wrapper(float3 in0,float3 in1,out float out0)
			{
				out0 = _dot_product(in0,in1);
			
			}
			void _equal_call_graph_wrapper(int in0,int in1,out bool out0)
			{
				out0 = _equal(in0,in1);
			
			}
			void _greater_call_graph_wrapper(float in0,float in1,out bool out0)
			{
				out0 = _greater(in0,in1);
			
			}
			void _less_call_graph_wrapper(float in0,float in1,out bool out0)
			{
				out0 = _less(in0,in1);
			
			}
			void _logical_and_call_graph_wrapper(bool in0,bool in1,out bool out0)
			{
				out0 = _logical_and(in0,in1);
			
			}
			void _multiply_call_graph_wrapper(float in0,float in1,out float out0)
			{
				out0 = _multiply(in0,in1);
			
			}
			void _multiply_call_graph_wrapper(float3 in0,float3 in1,out float3 out0)
			{
				out0 = _multiply(in0,in1);
			
			}
			void _multiply_call_graph_wrapper(int in0,int in1,out int out0)
			{
				out0 = _multiply(in0,in1);
			
			}
			void _subtract_call_graph_wrapper(float in0,float in1,out float out0)
			{
				out0 = _subtract(in0,in1);
			
			}
			void abs_call_graph_wrapper(float2 in0,out float2 out0)
			{
				out0 = abs(in0);
			
			}
			void clamp_call_graph_wrapper(float in0,float in1,float in2,out float out0)
			{
				out0 = clamp(in0,in1,in2);
			
			}
			void distance_call_graph_wrapper(float3 in0,float3 in1,out float out0)
			{
				out0 = distance(in0,in1);
			
			}
			void fmod_call_graph_wrapper(float in0,float in1,out float out0)
			{
				out0 = fmod(in0,in1);
			
			}
			void fmod_call_graph_wrapper(float2 in0,float2 in1,out float2 out0)
			{
				out0 = fmod(in0,in1);
			
			}
			void frac_call_graph_wrapper(float3 in0,out float3 out0)
			{
				out0 = frac(in0);
			
			}
			void length_call_graph_wrapper(float3 in0,out float out0)
			{
				out0 = length(in0);
			
			}
			void lerp_call_graph_wrapper(float in0,float in1,float in2,out float out0)
			{
				out0 = lerp(in0,in1,in2);
			
			}
			void min_call_graph_wrapper(float in0,float in1,out float out0)
			{
				out0 = min(in0,in1);
			
			}
			void positionToScreenUV_call_graph_wrapper(float3 in0,out float2 out0)
			{
				out0 = positionToScreenUV(in0);
			
			}
			void pow_call_graph_wrapper(float in0,float in1,out float out0)
			{
				out0 = pow(in0,in1);
			
			}
			void reflect_call_graph_wrapper(float3 in0,float3 in1,out float3 out0)
			{
				out0 = reflect(in0,in1);
			
			}
			void rerange_call_graph_wrapper(float2 in0,float in1,float in2,float in3,float in4,out float2 out0)
			{
				out0 = rerange(in0,in1,in2,in3,in4);
			
			}
			void saturate_call_graph_wrapper(float in0,out float out0)
			{
				out0 = saturate(in0);
			
			}
			void saturate_call_graph_wrapper(float2 in0,out float2 out0)
			{
				out0 = saturate(in0);
			
			}
			void sign_call_graph_wrapper(float in0,out float out0)
			{
				out0 = sign(in0);
			
			}
			void smoothstep_call_graph_wrapper(float in0,float in1,float in2,out float out0)
			{
				out0 = smoothstep(in0,in1,in2);
			
			}
			
		#elif VERTEX
			
			
		#elif EVALUATE
			
			
		#endif
		
		#ifdef PASS_SHADOW
			#define IS_SHADOW true
		#else
			#define IS_SHADOW false
		#endif
		
		#ifdef PASS_AUXILIARY
			#define IS_AUXILIARY true
		#else
			#define IS_AUXILIARY false
		#endif
		
		#ifdef PASS_DEFERRED
			#define IS_GBUFFER true
		#else
			#define IS_GBUFFER false
		#endif
		
		#ifdef BAKING_GI
			#define IS_BAKING_GI true
		#else
			#define IS_BAKING_GI false
		#endif
		
		#ifdef STATE_LIGHTMAP
			#define IS_LIGHTMAP true
		#else
			#define IS_LIGHTMAP false
		#endif
	#}
	
	Shader vertex =
	#{
		DATA_INSTANCE_ID = IN_INSTANCE;
		DATA_VERTEX_ID = IN_VERTEX_ID;
		DATA_TRANSFORM = VERTEX_IN_TRANSFORM;
		DATA_ITRANSFORM = inverseTransform(DATA_TRANSFORM);
		DATA_OBJECT_ROTATION = orthonormalize(toFloat3x3(DATA_TRANSFORM));
		DATA_VERTEX_POSITION = VERTEX_IN_POSITION;
		
		const float3 object_position = colW(DATA_TRANSFORM).xyz;
		
		const float4x4 object_to_view = DATA_TRANSFORM;
		const float4x4 view_to_object = DATA_ITRANSFORM;
		
		const float4x4 absolute_world_to_view = VERTEX_IN_MODELVIEW;
		const float4x4 view_to_absolute_world = VERTEX_IN_IMODELVIEW;
		
		const float3x3 camera_world_to_view = toFloat3x3(VERTEX_IN_MODELVIEW);
		const float3x3 view_to_camera_world = toFloat3x3(VERTEX_IN_IMODELVIEW);
		
		const float4x4 object_to_absolute_world = mul4(view_to_absolute_world, object_to_view);
		const float4x4 absolute_world_to_object = mul4(view_to_object, absolute_world_to_view);
		
		const float4x4 object_to_camera_world = mul4(camera_world_to_view, object_to_view);
		const float4x4 camera_world_to_object = mul4(view_to_object, view_to_camera_world);
		
		const float3x3 rotate_object_to_view = DATA_OBJECT_ROTATION;
		const float3x3 rotate_view_to_tangent = matrix3Row(DATA_TANGENT, DATA_BINORMAL, DATA_NORMAL);
		const float3x3 rotate_view_to_world = view_to_camera_world;
		
		const float3x3 rotate_object_to_world = mul3(rotate_view_to_world, rotate_object_to_view);
		const float3x3 rotate_world_to_tangent = mul3(rotate_view_to_tangent, camera_world_to_view);
		const float3x3 rotate_object_to_tangent = mul3(rotate_view_to_tangent, rotate_object_to_view);
		
		const uint2 screen_resolution = toUInt2(s_viewport.xy);
		const float2 screen_iresolution = s_viewport.zw;
		const float2 screen_uv = positionToScreenUV(DATA_POSITION);
		const uint2 screen_coord = toUInt2(screen_uv * s_viewport.xy);
		
		const float3 view_direction = positionToViewDirection(DATA_POSITION);
		
		const float auto_time = VERTEX_IN_TIME;
		const float auto_game_time = VERTEX_IN_GAME_TIME;
		
		const float2 cord_sample_Texture2D = DATA_UV.xy;
		const float2 cord_sample_Texture2DInt = DATA_UV.xy;
		const float2 cord_sample_Texture2DUint = DATA_UV.xy;
		const float2 cord_sample_Texture2DArray = DATA_UV.xy;
		const float  cord_sample_TextureRamp = DATA_UV.x;
		const float3 cord_sample_Texture3D = DATA_VERTEX_POSITION;
		const float3 cord_sample_TextureCube = mul3(rotate_view_to_world, reflect(-view_direction, DATA_NORMAL));
		
		#define NORMAL_TS_UV1(NORMAL_TS)
		#define NORMAL_TS_AUTO(NORMAL_TS, UV)
		
		float3 global_var_aa073e78ad728fe9cc8e46c0916ba6829899c10e = float3_zero;
		global_var_aa073e78ad728fe9cc8e46c0916ba6829899c10e = mul3(rotate_view_to_tangent, view_direction);
		float3 global_var_2ef0fdc4b1d5bf22cb68f2defda884228c529246 = float3_zero;
		global_var_2ef0fdc4b1d5bf22cb68f2defda884228c529246 = mul3(rotate_view_to_tangent, DATA_NORMAL);
		global_var_1ef54606f6729c15f0c1cc8c36839aab613b28a0 = mul4(object_to_view, DATA_VERTEX_POSITION).xyz;
		
		
		#undef NORMAL_TS_UV1
		#undef NORMAL_TS_AUTO
	#}
	Shader evaluate =
	#{
		const float3 object_position = colW(DATA_TRANSFORM).xyz;
		
		const float4x4 object_to_view = DATA_TRANSFORM;
		const float4x4 view_to_object = DATA_ITRANSFORM;
		
		const float4x4 absolute_world_to_view = s_modelview;
		const float4x4 view_to_absolute_world = s_imodelview;
		
		const float3x3 camera_world_to_view = toFloat3x3(s_modelview);
		const float3x3 view_to_camera_world = toFloat3x3(s_imodelview);
		
		const float4x4 object_to_absolute_world = mul4(view_to_absolute_world, object_to_view);
		const float4x4 absolute_world_to_object = mul4(view_to_object, absolute_world_to_view);
		
		const float4x4 object_to_camera_world = mul4(view_to_camera_world, object_to_view);
		const float4x4 camera_world_to_object = mul4(view_to_object, camera_world_to_view);
		
		const float3x3 rotate_object_to_view = DATA_OBJECT_ROTATION;
		const float3x3 rotate_view_to_tangent = matrix3Row(DATA_TANGENT, DATA_BINORMAL, DATA_NORMAL);
		const float3x3 rotate_view_to_world = view_to_camera_world;
		
		const float3x3 rotate_object_to_world = mul3(rotate_view_to_world, rotate_object_to_view);
		const float3x3 rotate_world_to_tangent = mul3(rotate_view_to_tangent, camera_world_to_view);
		const float3x3 rotate_object_to_tangent = mul3(rotate_view_to_tangent, rotate_object_to_view);
		
		const uint2 screen_resolution = toUInt2(s_viewport.xy);
		const float2 screen_iresolution = s_viewport.zw;
		const float2 screen_uv = positionToScreenUV(DATA_POSITION);
		const uint2 screen_coord = toUInt2(screen_uv * s_viewport.xy);
		
		const float3 view_direction = positionToViewDirection(DATA_POSITION);
		
		const float auto_time = s_time;
		const float auto_game_time = s_game_time;
		
		const float2 cord_sample_Texture2D = DATA_UV.xy;
		const float2 cord_sample_Texture2DInt = DATA_UV.xy;
		const float2 cord_sample_Texture2DUint = DATA_UV.xy;
		const float2 cord_sample_Texture2DArray = DATA_UV.xy;
		const float  cord_sample_TextureRamp = DATA_UV.x;
		const float3 cord_sample_Texture3D = DATA_VERTEX_POSITION;
		const float3 cord_sample_TextureCube = mul3(rotate_view_to_world, reflect(-view_direction, DATA_NORMAL));
		
		#define NORMAL_TS_UV1(NORMAL_TS)
		#define NORMAL_TS_AUTO(NORMAL_TS, UV)
		
		
		
		#undef NORMAL_TS_UV1
		#undef NORMAL_TS_AUTO
	#}
	
	Shader fragment =
	#{
		const float3 object_position = colW(DATA_TRANSFORM).xyz;
		
		const float4x4 object_to_view = DATA_TRANSFORM;
		const float4x4 view_to_object = DATA_ITRANSFORM;
		
		const float4x4 absolute_world_to_view = s_modelview;
		const float4x4 view_to_absolute_world = s_imodelview;
		
		const float3x3 camera_world_to_view = toFloat3x3(s_modelview);
		const float3x3 view_to_camera_world = toFloat3x3(s_imodelview);
		
		const float4x4 object_to_absolute_world = mul4(view_to_absolute_world, object_to_view);
		const float4x4 absolute_world_to_object = mul4(view_to_object, absolute_world_to_view);
		
		const float4x4 object_to_camera_world = mul4(view_to_camera_world, object_to_view);
		const float4x4 camera_world_to_object = mul4(view_to_object, camera_world_to_view);
		
		
		normalizationTBN(DATA_TANGENT, DATA_BINORMAL, DATA_NORMAL, DATA_SIGN_BINORMAL);
		
		const float3x3 rotate_object_to_view = DATA_OBJECT_ROTATION;
		const float3x3 rotate_view_to_tangent = matrix3Row(DATA_TANGENT, DATA_BINORMAL, DATA_NORMAL);
		const float3x3 rotate_view_to_world = view_to_camera_world;
		
		const float3x3 rotate_object_to_world = mul3(rotate_view_to_world, rotate_object_to_view);
		const float3x3 rotate_world_to_tangent = mul3(rotate_view_to_tangent, camera_world_to_view);
		const float3x3 rotate_object_to_tangent = mul3(rotate_view_to_tangent, rotate_object_to_view);
		
		
		const float3 N = DATA_NORMAL;
		float3 T_DY = cross(ddy(DATA_POSITION), DATA_NORMAL);
		float3 T_DX = cross(DATA_NORMAL, ddx(DATA_POSITION));
		
		float3x3 rotate_tangent_uv1_to_uv0;
		{
			float3 T = T_DY * ddx(DATA_UV.z) + T_DX * ddy(DATA_UV.z);
			T = normalize(N * dot(T, N) - T);
			float3 B = cross(T, N);
			rotate_tangent_uv1_to_uv0 = mul3(rotate_view_to_tangent, matrix3Col(T,B,N));
		}
		
		#define NORMAL_TS_UV1(NORMAL_TS) NORMAL_TS = mul3(rotate_tangent_uv1_to_uv0, NORMAL_TS);
		#define NORMAL_TS_AUTO(NORMAL_TS, UV)\
		{\
			float3 T = T_DY * ddx(UV.x) + T_DX * ddy(UV.x);\
			T = normalize(N * dot(T, N) - T);\
			float3 B = cross(T, N);\
			NORMAL_TS = mul3(matrix3Col(T,B,N), NORMAL_TS);\
			NORMAL_TS = mul3(DATA_TANGENT, DATA_BINORMAL, DATA_NORMAL, NORMAL_TS);\
		}
		
		const uint2 screen_resolution = toUInt2(s_viewport.xy);
		const float2 screen_iresolution = s_viewport.zw;
		const uint2 screen_coord = toUInt2(IN_POSITION.xy);
		const float2 screen_uv = IN_POSITION.xy * s_viewport.zw;
		
		const float3 view_direction = positionToViewDirection(DATA_POSITION);
		
		const float auto_time = s_time;
		const float auto_game_time = s_game_time;
		
		const float2 cord_sample_Texture2D = DATA_UV.xy;
		const float2 cord_sample_Texture2DInt = DATA_UV.xy;
		const float2 cord_sample_Texture2DArray = DATA_UV.xy;
		const float  cord_sample_TextureRamp = DATA_UV.x;
		const float3 cord_sample_Texture3D = DATA_VERTEX_POSITION;
		const float3 cord_sample_TextureCube = mul3(rotate_view_to_world, reflect(-view_direction, DATA_NORMAL));
		
		#ifdef OPTION_TRANSPARENT
			float shadow_clip_threshold = 0.5f;
		#endif
		#ifdef OPTION_TRANSPARENT || ALPHA_TEST
			float auxiliary_clip_threshold = 0.5f;
		#endif
		
		float3 var_116 = float3_zero;
		float var_115 = float_zero;
		float var_114 = float_zero;
		float var_113 = float_zero;
		float3 var_112 = float3_zero;
		float var_111 = float_zero;
		float var_110 = float_zero;
		float var_109 = float_zero;
		float3 var_108 = float3_zero;
		float3 var_107 = float3_zero;
		float3 var_106 = float3_zero;
		float3 var_105 = float3_zero;
		float3 var_104 = float3_zero;
		float4 var_103 = float4_zero;
		float4 var_102 = float4_zero;
		float var_101 = float_zero;
		float var_100 = float_zero;
		float var_99 = float_zero;
		float var_98 = float_zero;
		float var_97 = float_zero;
		float2 var_96 = float2_zero;
		float3 var_95 = float3_zero;
		float3 var_94 = float3_zero;
		float3 var_93 = float3_zero;
		float var_92 = float_zero;
		float var_91 = float_zero;
		float var_90 = float_zero;
		float var_89 = float_zero;
		bool var_88 = bool_zero;
		float var_87 = float_zero;
		float2 var_86 = float2_zero;
		int var_85 = int_zero;
		int var_84 = int_zero;
		float var_83 = float_zero;
		bool var_82 = bool_zero;
		bool var_81 = bool_zero;
		bool var_80 = bool_zero;
		bool var_79 = bool_zero;
		float var_78 = float_zero;
		float var_77 = float_zero;
		float var_76 = float_zero;
		float var_75 = float_zero;
		float2 var_74 = float2_zero;
		float var_73 = float_zero;
		float var_72 = float_zero;
		float2 var_71 = float2_zero;
		float2 var_70 = float2_zero;
		float2 var_69 = float2_zero;
		float2 var_68 = float2_zero;
		float2 var_67 = float2_zero;
		float var_66 = float_zero;
		float var_65 = float_zero;
		float var_64 = float_zero;
		float2 var_63 = float2_zero;
		float2 var_62 = float2_zero;
		float var_61 = float_zero;
		float var_60 = float_zero;
		float var_59 = float_zero;
		float3 var_58 = float3_zero;
		float3 var_57 = float3_zero;
		float3 var_56 = float3_zero;
		float var_55 = float_zero;
		float var_54 = float_zero;
		float var_53 = float_zero;
		float var_52 = float_zero;
		float var_51 = float_zero;
		float var_50 = float_zero;
		float2 var_49 = float2_zero;
		float3 var_48 = float3_zero;
		int var_47 = int_zero;
		float3 var_45 = float3_zero;
		float3 var_44 = float3_zero;
		float var_43 = float_zero;
		float var_42 = float_zero;
		float var_41 = float_zero;
		float var_40 = float_zero;
		bool var_39 = bool_zero;
		float var_38 = float_zero;
		float var_37 = float_zero;
		int var_36 = int_zero;
		int var_35 = int_zero;
		int var_34 = int_zero;
		int var_33 = int_zero;
		float3 var_32 = float3_zero;
		int var_31 = int_zero;
		float var_29 = float_zero;
		float var_28 = float_zero;
		float var_27 = float_zero;
		float var_26 = float_zero;
		float var_25 = float_zero;
		float3 var_24 = float3_zero;
		float var_23 = float_zero;
		float3 var_22 = float3_zero;
		float3 var_21 = float3_zero;
		float var_20 = float_zero;
		float3 var_19 = float3_zero;
		float var_18 = float_zero;
		float3 var_17 = float3_zero;
		float4 var_16 = float4_zero;
		float var_15 = float_zero;
		float var_14 = float_zero;
		float var_13 = float_zero;
		float var_12 = float_zero;
		float4 var_11 = float4_zero;
		float var_10 = float_zero;
		float var_9 = float_zero;
		float var_8 = float_zero;
		float2 var_7 = float2_zero;
		float3 var_6 = float3_zero;
		float var_5 = float_zero;
		float var_4 = float_zero;
		float3 var_3 = float3_zero;
		float3 var_2 = float3_zero;
		float3 var_1 = float3_zero;
		float3 global_var_aa073e78ad728fe9cc8e46c0916ba6829899c10e = float3_zero;
		global_var_aa073e78ad728fe9cc8e46c0916ba6829899c10e = mul3(rotate_view_to_tangent, view_direction);
		float3 global_var_2ef0fdc4b1d5bf22cb68f2defda884228c529246 = float3_zero;
		global_var_2ef0fdc4b1d5bf22cb68f2defda884228c529246 = mul3(rotate_view_to_tangent, DATA_NORMAL);
		var_1 = view_direction;
		var_2 = _make_expr_float3(- var_1.x,- var_1.y,- var_1.z);
		var_3 = mul3(float3(0.000000f,0.000000f,1.000000f), rotate_view_to_tangent);
		fmod_call_graph_wrapper(toFloat(s_frame),toFloat(make_int(16)),var_4);
		_dot_product_call_graph_wrapper(global_var_aa073e78ad728fe9cc8e46c0916ba6829899c10e,global_var_2ef0fdc4b1d5bf22cb68f2defda884228c529246,var_5);
		reflect_call_graph_wrapper(var_2,var_3,var_6);
		fmod_call_graph_wrapper(toFloat2(toInt2(screen_coord)),toFloat2(256.000000f),var_7);
		_multiply_call_graph_wrapper(var_4,GOLDEN_RATIO,var_8);
		_add_call_graph_wrapper(0.300000f,0.000100f,var_9);
		saturate_call_graph_wrapper(var_5,var_10);
		var_11 = TEXTURE_ARRAY_FETCH_LOD(8f0b1da8df486a941a5f2a91917ef4deff3baa5b, toInt2(var_7), int_zero, int_zero);
		_multiply_call_graph_wrapper(var_8,s_taa,var_12);
		var_13 = var_9;
		var_14 = _make_expr_float(1- var_13.x);
		_subtract_call_graph_wrapper(1.000000f,var_10,var_15);
		var_16 = var_11;
		var_17 = _make_expr_float3( var_16.xyz);
		var_18 = var_12;
		var_19 = _make_expr_float3( var_18.xxx);
		pow_call_graph_wrapper(var_15,3.000000f,var_20);
		_add_call_graph_wrapper(var_17,var_19,var_21);
		frac_call_graph_wrapper(var_21,var_22);
		lerp_call_graph_wrapper(0.050000f,1.000000f,var_20,var_23);
		var_24 = var_22;
		var_25 = _make_expr_float( var_24.x);
		_multiply_call_graph_wrapper(var_25,0.030000f,var_26);
		_multiply_call_graph_wrapper(var_25,0.060000f,var_27);
		lerp_call_graph_wrapper(0.030000f,var_26,0.200000f,var_28);
		lerp_call_graph_wrapper(0.060000f,var_27,0.200000f,var_29);
		var_32 = global_var_1ef54606f6729c15f0c1cc8c36839aab613b28a0;
		unroll for(var_31 = 0; var_31 < 8; var_31++)
		{
			_multiply_call_graph_wrapper(var_31,var_31,var_33);
			_add_call_graph_wrapper(var_33,make_int(1),var_34);
			var_35 = make_int(8);
			var_36 = _make_expr_int( var_35.x-1);
			_multiply_call_graph_wrapper(var_28,toFloat(var_34),var_37);
			_multiply_call_graph_wrapper(var_29,toFloat(var_34),var_38);
			_equal_call_graph_wrapper(var_31,var_36,var_39);
			var_40 = var_39 ? 100000.000000f : var_38;
			var_41 = var_39 ? 100000.000000f : var_37;
			var_42 = var_40;
			var_43 = _make_expr_float( var_42.x);
			_multiply_call_graph_wrapper(var_6,toFloat3(var_41),var_44);
			_add_call_graph_wrapper(var_32,var_44,var_45);
			var_48 = var_45;
			unroll for(var_47 = 0; var_47 < 4; var_47++)
			{
				positionToScreenUV_call_graph_wrapper(var_48,var_49);
				length_call_graph_wrapper(var_48,var_50);
				var_51 = (TEXTURE_BIAS(tex_linear_depth, var_49, 0.000000f)).r;
				var_52 = var_51;
				var_53 = _make_expr_float( var_52.x);
				_subtract_call_graph_wrapper(var_53,var_50,var_54);
				clamp_call_graph_wrapper(var_54,0.000000f,var_41,var_55);
				_multiply_call_graph_wrapper(var_6,toFloat3(var_55),var_56);
				_add_call_graph_wrapper(var_48,var_56,var_57);
				var_48 = var_57;
				if (bool_zero) break;
			}
			var_58 = var_57;
			var_59 = _make_expr_float(- var_58.z);
			sign_call_graph_wrapper(var_59,var_60);
			saturate_call_graph_wrapper(var_60,var_61);
			positionToScreenUV_call_graph_wrapper(var_57,var_62);
			saturate_call_graph_wrapper(var_62,var_63);
			var_64 = (TEXTURE_BIAS(tex_linear_depth, var_63, 0.000000f)).r;
			var_65 = var_64;
			var_66 = _make_expr_float( var_65.x);
			rerange_call_graph_wrapper(var_63,0.000000f,1.000000f,-1.000000f,1.000000f,var_67);
			abs_call_graph_wrapper(var_67,var_68);
			rerange_call_graph_wrapper(var_68,var_14,1.000000f,1.000000f,0.000000f,var_69);
			saturate_call_graph_wrapper(var_69,var_70);
			var_71 = var_70;
			var_72 = _make_expr_float( var_71.x);
			length_call_graph_wrapper(var_57,var_73);
			var_74 = var_70;
			var_75 = _make_expr_float( var_74.y);
			_subtract_call_graph_wrapper(var_73,var_66,var_76);
			min_call_graph_wrapper(var_72,var_75,var_77);
			smoothstep_call_graph_wrapper(0.000000f,1.000000f,var_77,var_78);
			_less_call_graph_wrapper(var_76,var_43,var_79);
			_greater_call_graph_wrapper(var_76,0.000000f,var_80);
			_logical_and_call_graph_wrapper(var_80,var_79,var_81);
			_logical_and_call_graph_wrapper(var_81,toBool(var_61),var_82);
			min_call_graph_wrapper(toFloat(var_82),var_78,var_83);
			var_32 = var_57;
			if (toBool(var_83)) break;
		}
		var_84 = make_int(8);
		var_85 = _make_expr_int( var_84.x-1);
		positionToScreenUV_call_graph_wrapper(var_57,var_86);
		length_call_graph_wrapper(var_57,var_87);
		_equal_call_graph_wrapper(var_31,var_85,var_88);
		var_89 = (TEXTURE_BIAS(tex_linear_depth, var_86, 0.000000f)).r;
		var_90 = var_89;
		var_91 = _make_expr_float( var_90.x);
		_subtract_call_graph_wrapper(var_91,var_87,var_92);
		_multiply_call_graph_wrapper(var_6,toFloat3(var_92),var_93);
		var_94 = var_88 ? float3(0.000000f,0.000000f,0.000000f) : var_93;
		_add_call_graph_wrapper(var_57,var_94,var_95);
		positionToScreenUV_call_graph_wrapper(var_95,var_96);
		distance_call_graph_wrapper(global_var_1ef54606f6729c15f0c1cc8c36839aab613b28a0,var_95,var_97);
		_multiply_call_graph_wrapper(var_97,0.000000f,var_98);
		pow_call_graph_wrapper(var_98,0.500000f,var_99);
		_multiply_call_graph_wrapper(var_99,6.000000f,var_100);
		_add_call_graph_wrapper(var_100,0.000000f,var_101);
		var_102 = TEXTURE_BIAS(tex_screen_color_old_reprojection, var_96, var_101);
		var_103 = var_102;
		var_104 = _make_expr_float3( var_103.xyz);
		var_105 = toBool(var_83) ? var_104 : float3(0.000000f,0.000000f,0.000000f);
		var_106 = var_105;
		var_107 = _make_expr_float3( var_106.xyz);
		_multiply_call_graph_wrapper(var_107,toFloat3(var_83),var_108);
		var_109 = var_83;
		var_110 = _make_expr_float(1- var_109.x);
		var_111 = var_23;
		
		var_112 = toFloat3(1.000000f);
		
		var_113 = 1.000000f;
		
		var_114 = var_4b93d8479cb2d112283ef34d1b437d234adde333;
		
		var_115 = var_110;
		
		var_116 = var_108;
		
		OUT_FRAG_OPACITY = var_111;
		
		OUT_FRAG_ALBEDO = var_112;
		
		OUT_FRAG_METALNESS = var_113;
		
		OUT_FRAG_ROUGHNESS = var_114;
		
		OUT_FRAG_OCCLUSION = var_115;
		
		OUT_FRAG_EMISSION = var_116;
		
		
		
		#ifdef PASS_SHADOW && OPTION_TRANSPARENT
			OUT_FRAG_OPACITY_THRESHOLD = shadow_clip_threshold;
		#endif
		#ifdef PASS_AUXILIARY && (OPTION_TRANSPARENT || ALPHA_TEST)
			OUT_FRAG_OPACITY_THRESHOLD = auxiliary_clip_threshold;
		#endif
		
		#undef NORMAL_TS_UV1
		#undef NORMAL_TS_AUTO
	#}
}
