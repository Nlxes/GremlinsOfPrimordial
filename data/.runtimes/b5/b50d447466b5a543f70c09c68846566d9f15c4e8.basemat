//ver=2
BaseMaterial<
				parent=Unigine::mesh
				guid=b50d447466b5a543f70c09c68846566d9f15c4e8
				manual=false
				
			>
{
	// optimization
	State static_shadow = false
	
Texture2D "299d546d5ae37f528a6e35a66a9dd0cdeba93bc8"="guid://68ec9d54345668a38a6e35a66a9dd0cdeba93bc8" <shader_name="299d546d5ae37f528a6e35a66a9dd0cdeba93bc8" editable=false wrap=[repeat_x repeat_y repeat_z ]>
Group "Parameters"
{
Color "albedo_color"=[1.000000 1.000000 1.000000 1.000000] < shader_name="var_af1b2829d2847e875749730efc6f30d667188888">
Slider "metalness"=0.000000 < min=0 max=1 shader_name="var_3faaa105866f6f4f9c67d41c181297eadd5ff3e1">
Slider "roughness"=0.500000 < min=0 max=1 shader_name="var_4b93d8479cb2d112283ef34d1b437d234adde333">
}
	State static_shadow = true

	
	Shader vertex_struct =
	#{
		INIT_BASE_DATA
		
		INIT_USER_DATA(float3, DATA_VERTEX_POSITION)
		MODIFIER_NOINTERPOLATION INIT_USER_DATA(float4x4, DATA_TRANSFORM)
		MODIFIER_NOINTERPOLATION INIT_USER_DATA(float4x4, DATA_ITRANSFORM)
		MODIFIER_NOINTERPOLATION INIT_USER_DATA(float3x3, DATA_OBJECT_ROTATION)
		
		MODIFIER_NOINTERPOLATION INIT_USER_DATA(uint, DATA_INSTANCE_ID)
		MODIFIER_NOINTERPOLATION INIT_USER_DATA(uint, DATA_VERTEX_ID)
	#}
	
	Shader common =
	#{
		#include <core/materials/shaders/render/graph/common.h>
		#ifdef FRAGMENT
			#include <core/materials/shaders/render/graph/base.h>
			#include <core/materials/shaders/render/graph/common.h>
			
			void _add_call_graph_wrapper(float2 in0,float2 in1,out float2 out0)
			{
				out0 = _add(in0,in1);
			
			}
			void _add_call_graph_wrapper(float4 in0,float4 in1,out float4 out0)
			{
				out0 = _add(in0,in1);
			
			}
			void _divide_call_graph_wrapper(float3 in0,float3 in1,out float3 out0)
			{
				out0 = _divide(in0,in1);
			
			}
			void _dot_product_call_graph_wrapper(float3 in0,float3 in1,out float out0)
			{
				out0 = _dot_product(in0,in1);
			
			}
			void _multiply_call_graph_wrapper(float in0,float in1,out float out0)
			{
				out0 = _multiply(in0,in1);
			
			}
			void _multiply_call_graph_wrapper(float2 in0,float2 in1,out float2 out0)
			{
				out0 = _multiply(in0,in1);
			
			}
			void _multiply_call_graph_wrapper(float4 in0,float4 in1,out float4 out0)
			{
				out0 = _multiply(in0,in1);
			
			}
			void _subtract_call_graph_wrapper(float in0,float in1,out float out0)
			{
				out0 = _subtract(in0,in1);
			
			}
			void abs_call_graph_wrapper(float3 in0,out float3 out0)
			{
				out0 = abs(in0);
			
			}
			void exp_call_graph_wrapper(float in0,out float out0)
			{
				out0 = exp(in0);
			
			}
			void pow_call_graph_wrapper(float3 in0,float3 in1,out float3 out0)
			{
				out0 = pow(in0,in1);
			
			}
			void sign_call_graph_wrapper(float in0,out float out0)
			{
				out0 = sign(in0);
			
			}
			
		#elif VERTEX
			
			
		#elif EVALUATE
			
			
		#endif
		
		#ifdef PASS_SHADOW
			#define IS_SHADOW true
		#else
			#define IS_SHADOW false
		#endif
		
		#ifdef PASS_AUXILIARY
			#define IS_AUXILIARY true
		#else
			#define IS_AUXILIARY false
		#endif
		
		#ifdef PASS_DEFERRED
			#define IS_GBUFFER true
		#else
			#define IS_GBUFFER false
		#endif
		
		#ifdef BAKING_GI
			#define IS_BAKING_GI true
		#else
			#define IS_BAKING_GI false
		#endif
		
		#ifdef STATE_LIGHTMAP
			#define IS_LIGHTMAP true
		#else
			#define IS_LIGHTMAP false
		#endif
	#}
	
	Shader vertex =
	#{
		DATA_INSTANCE_ID = IN_INSTANCE;
		DATA_VERTEX_ID = IN_VERTEX_ID;
		DATA_TRANSFORM = VERTEX_IN_TRANSFORM;
		DATA_ITRANSFORM = inverseTransform(DATA_TRANSFORM);
		DATA_OBJECT_ROTATION = orthonormalize(toFloat3x3(DATA_TRANSFORM));
		DATA_VERTEX_POSITION = VERTEX_IN_POSITION;
		
		const float3 object_position = colW(DATA_TRANSFORM).xyz;
		
		const float4x4 object_to_view = DATA_TRANSFORM;
		const float4x4 view_to_object = DATA_ITRANSFORM;
		
		const float4x4 absolute_world_to_view = VERTEX_IN_MODELVIEW;
		const float4x4 view_to_absolute_world = VERTEX_IN_IMODELVIEW;
		
		const float3x3 camera_world_to_view = toFloat3x3(VERTEX_IN_MODELVIEW);
		const float3x3 view_to_camera_world = toFloat3x3(VERTEX_IN_IMODELVIEW);
		
		const float4x4 object_to_absolute_world = mul4(view_to_absolute_world, object_to_view);
		const float4x4 absolute_world_to_object = mul4(view_to_object, absolute_world_to_view);
		
		const float4x4 object_to_camera_world = mul4(camera_world_to_view, object_to_view);
		const float4x4 camera_world_to_object = mul4(view_to_object, view_to_camera_world);
		
		const float3x3 rotate_object_to_view = DATA_OBJECT_ROTATION;
		const float3x3 rotate_view_to_tangent = matrix3Row(DATA_TANGENT, DATA_BINORMAL, DATA_NORMAL);
		const float3x3 rotate_view_to_world = view_to_camera_world;
		
		const float3x3 rotate_object_to_world = mul3(rotate_view_to_world, rotate_object_to_view);
		const float3x3 rotate_world_to_tangent = mul3(rotate_view_to_tangent, camera_world_to_view);
		const float3x3 rotate_object_to_tangent = mul3(rotate_view_to_tangent, rotate_object_to_view);
		
		const uint2 screen_resolution = toUInt2(s_viewport.xy);
		const float2 screen_iresolution = s_viewport.zw;
		const float2 screen_uv = positionToScreenUV(DATA_POSITION);
		const uint2 screen_coord = toUInt2(screen_uv * s_viewport.xy);
		
		const float3 view_direction = positionToViewDirection(DATA_POSITION);
		
		const float auto_time = VERTEX_IN_TIME;
		const float auto_game_time = VERTEX_IN_GAME_TIME;
		
		const float2 cord_sample_Texture2D = DATA_UV.xy;
		const float2 cord_sample_Texture2DInt = DATA_UV.xy;
		const float2 cord_sample_Texture2DUint = DATA_UV.xy;
		const float2 cord_sample_Texture2DArray = DATA_UV.xy;
		const float  cord_sample_TextureRamp = DATA_UV.x;
		const float3 cord_sample_Texture3D = DATA_VERTEX_POSITION;
		const float3 cord_sample_TextureCube = mul3(rotate_view_to_world, reflect(-view_direction, DATA_NORMAL));
		
		#define NORMAL_TS_UV1(NORMAL_TS)
		#define NORMAL_TS_AUTO(NORMAL_TS, UV)
		
		float3 global_var_7afd0ffdef8db69bcbb765a049958c25728f0dd7 = float3_zero;
		global_var_7afd0ffdef8db69bcbb765a049958c25728f0dd7 = mul3(DATA_NORMAL, rotate_object_to_view);
		
		
		#undef NORMAL_TS_UV1
		#undef NORMAL_TS_AUTO
	#}
	Shader evaluate =
	#{
		const float3 object_position = colW(DATA_TRANSFORM).xyz;
		
		const float4x4 object_to_view = DATA_TRANSFORM;
		const float4x4 view_to_object = DATA_ITRANSFORM;
		
		const float4x4 absolute_world_to_view = s_modelview;
		const float4x4 view_to_absolute_world = s_imodelview;
		
		const float3x3 camera_world_to_view = toFloat3x3(s_modelview);
		const float3x3 view_to_camera_world = toFloat3x3(s_imodelview);
		
		const float4x4 object_to_absolute_world = mul4(view_to_absolute_world, object_to_view);
		const float4x4 absolute_world_to_object = mul4(view_to_object, absolute_world_to_view);
		
		const float4x4 object_to_camera_world = mul4(view_to_camera_world, object_to_view);
		const float4x4 camera_world_to_object = mul4(view_to_object, camera_world_to_view);
		
		const float3x3 rotate_object_to_view = DATA_OBJECT_ROTATION;
		const float3x3 rotate_view_to_tangent = matrix3Row(DATA_TANGENT, DATA_BINORMAL, DATA_NORMAL);
		const float3x3 rotate_view_to_world = view_to_camera_world;
		
		const float3x3 rotate_object_to_world = mul3(rotate_view_to_world, rotate_object_to_view);
		const float3x3 rotate_world_to_tangent = mul3(rotate_view_to_tangent, camera_world_to_view);
		const float3x3 rotate_object_to_tangent = mul3(rotate_view_to_tangent, rotate_object_to_view);
		
		const uint2 screen_resolution = toUInt2(s_viewport.xy);
		const float2 screen_iresolution = s_viewport.zw;
		const float2 screen_uv = positionToScreenUV(DATA_POSITION);
		const uint2 screen_coord = toUInt2(screen_uv * s_viewport.xy);
		
		const float3 view_direction = positionToViewDirection(DATA_POSITION);
		
		const float auto_time = s_time;
		const float auto_game_time = s_game_time;
		
		const float2 cord_sample_Texture2D = DATA_UV.xy;
		const float2 cord_sample_Texture2DInt = DATA_UV.xy;
		const float2 cord_sample_Texture2DUint = DATA_UV.xy;
		const float2 cord_sample_Texture2DArray = DATA_UV.xy;
		const float  cord_sample_TextureRamp = DATA_UV.x;
		const float3 cord_sample_Texture3D = DATA_VERTEX_POSITION;
		const float3 cord_sample_TextureCube = mul3(rotate_view_to_world, reflect(-view_direction, DATA_NORMAL));
		
		#define NORMAL_TS_UV1(NORMAL_TS)
		#define NORMAL_TS_AUTO(NORMAL_TS, UV)
		
		
		
		#undef NORMAL_TS_UV1
		#undef NORMAL_TS_AUTO
	#}
	
	Shader fragment =
	#{
		const float3 object_position = colW(DATA_TRANSFORM).xyz;
		
		const float4x4 object_to_view = DATA_TRANSFORM;
		const float4x4 view_to_object = DATA_ITRANSFORM;
		
		const float4x4 absolute_world_to_view = s_modelview;
		const float4x4 view_to_absolute_world = s_imodelview;
		
		const float3x3 camera_world_to_view = toFloat3x3(s_modelview);
		const float3x3 view_to_camera_world = toFloat3x3(s_imodelview);
		
		const float4x4 object_to_absolute_world = mul4(view_to_absolute_world, object_to_view);
		const float4x4 absolute_world_to_object = mul4(view_to_object, absolute_world_to_view);
		
		const float4x4 object_to_camera_world = mul4(view_to_camera_world, object_to_view);
		const float4x4 camera_world_to_object = mul4(view_to_object, camera_world_to_view);
		
		
		normalizationTBN(DATA_TANGENT, DATA_BINORMAL, DATA_NORMAL, DATA_SIGN_BINORMAL);
		
		const float3x3 rotate_object_to_view = DATA_OBJECT_ROTATION;
		const float3x3 rotate_view_to_tangent = matrix3Row(DATA_TANGENT, DATA_BINORMAL, DATA_NORMAL);
		const float3x3 rotate_view_to_world = view_to_camera_world;
		
		const float3x3 rotate_object_to_world = mul3(rotate_view_to_world, rotate_object_to_view);
		const float3x3 rotate_world_to_tangent = mul3(rotate_view_to_tangent, camera_world_to_view);
		const float3x3 rotate_object_to_tangent = mul3(rotate_view_to_tangent, rotate_object_to_view);
		
		
		const float3 N = DATA_NORMAL;
		float3 T_DY = cross(ddy(DATA_POSITION), DATA_NORMAL);
		float3 T_DX = cross(DATA_NORMAL, ddx(DATA_POSITION));
		
		float3x3 rotate_tangent_uv1_to_uv0;
		{
			float3 T = T_DY * ddx(DATA_UV.z) + T_DX * ddy(DATA_UV.z);
			T = normalize(N * dot(T, N) - T);
			float3 B = cross(T, N);
			rotate_tangent_uv1_to_uv0 = mul3(rotate_view_to_tangent, matrix3Col(T,B,N));
		}
		
		#define NORMAL_TS_UV1(NORMAL_TS) NORMAL_TS = mul3(rotate_tangent_uv1_to_uv0, NORMAL_TS);
		#define NORMAL_TS_AUTO(NORMAL_TS, UV)\
		{\
			float3 T = T_DY * ddx(UV.x) + T_DX * ddy(UV.x);\
			T = normalize(N * dot(T, N) - T);\
			float3 B = cross(T, N);\
			NORMAL_TS = mul3(matrix3Col(T,B,N), NORMAL_TS);\
			NORMAL_TS = mul3(DATA_TANGENT, DATA_BINORMAL, DATA_NORMAL, NORMAL_TS);\
		}
		
		const uint2 screen_resolution = toUInt2(s_viewport.xy);
		const float2 screen_iresolution = s_viewport.zw;
		const uint2 screen_coord = toUInt2(IN_POSITION.xy);
		const float2 screen_uv = IN_POSITION.xy * s_viewport.zw;
		
		const float3 view_direction = positionToViewDirection(DATA_POSITION);
		
		const float auto_time = s_time;
		const float auto_game_time = s_game_time;
		
		const float2 cord_sample_Texture2D = DATA_UV.xy;
		const float2 cord_sample_Texture2DInt = DATA_UV.xy;
		const float2 cord_sample_Texture2DArray = DATA_UV.xy;
		const float  cord_sample_TextureRamp = DATA_UV.x;
		const float3 cord_sample_Texture3D = DATA_VERTEX_POSITION;
		const float3 cord_sample_TextureCube = mul3(rotate_view_to_world, reflect(-view_direction, DATA_NORMAL));
		
		#ifdef OPTION_TRANSPARENT
			float shadow_clip_threshold = 0.5f;
		#endif
		#ifdef OPTION_TRANSPARENT || ALPHA_TEST
			float auxiliary_clip_threshold = 0.5f;
		#endif
		
		float var_75 = float_zero;
		float var_74 = float_zero;
		float3 var_73 = float3_zero;
		float4 var_72 = float4_zero;
		float3 var_71 = float3_zero;
		float4 var_70 = float4_zero;
		float4 var_69 = float4_zero;
		float4 var_68 = float4_zero;
		float4 var_67 = float4_zero;
		float4 var_66 = float4_zero;
		float4 var_65 = float4_zero;
		float var_64 = float_zero;
		float3 var_63 = float3_zero;
		float var_62 = float_zero;
		float3 var_61 = float3_zero;
		float var_60 = float_zero;
		float3 var_59 = float3_zero;
		float4 var_58 = float4_zero;
		float4 var_57 = float4_zero;
		float4 var_56 = float4_zero;
		float2 var_55 = float2_zero;
		float2 var_54 = float2_zero;
		float3 var_53 = float3_zero;
		float2 var_52 = float2_zero;
		float2 var_51 = float2_zero;
		float2 var_50 = float2_zero;
		float2 var_49 = float2_zero;
		float2 var_48 = float2_zero;
		float var_47 = float_zero;
		float3 var_46 = float3_zero;
		float2 var_45 = float2_zero;
		float2 var_44 = float2_zero;
		float2 var_43 = float2_zero;
		float var_42 = float_zero;
		float2 var_41 = float2_zero;
		float2 var_40 = float2_zero;
		float var_39 = float_zero;
		float2 var_38 = float2_zero;
		float var_37 = float_zero;
		float2 var_36 = float2_zero;
		float var_35 = float_zero;
		float2 var_34 = float2_zero;
		float var_33 = float_zero;
		float2 var_32 = float2_zero;
		float var_31 = float_zero;
		float2 var_30 = float2_zero;
		float var_29 = float_zero;
		float var_28 = float_zero;
		float2 var_27 = float2_zero;
		float var_26 = float_zero;
		float3 var_25 = float3_zero;
		float2 var_24 = float2_zero;
		float3 var_23 = float3_zero;
		float2 var_22 = float2_zero;
		float3 var_21 = float3_zero;
		float2 var_20 = float2_zero;
		float3 var_19 = float3_zero;
		float var_18 = float_zero;
		float3 var_17 = float3_zero;
		float2 var_16 = float2_zero;
		float3 var_15 = float3_zero;
		float2 var_14 = float2_zero;
		float3 var_13 = float3_zero;
		float2 var_12 = float2_zero;
		float3 var_11 = float3_zero;
		float var_10 = float_zero;
		float3 var_9 = float3_zero;
		float var_8 = float_zero;
		float3 var_7 = float3_zero;
		float2 var_6 = float2_zero;
		float3 var_5 = float3_zero;
		float2 var_4 = float2_zero;
		float3 var_3 = float3_zero;
		float2 var_2 = float2_zero;
		float3 var_1 = float3_zero;
		float3 global_var_7afd0ffdef8db69bcbb765a049958c25728f0dd7 = float3_zero;
		global_var_7afd0ffdef8db69bcbb765a049958c25728f0dd7 = mul3(DATA_NORMAL, rotate_object_to_view);
		var_1 = DATA_VERTEX_POSITION;
		var_2 = _make_expr_float2( var_1.y,- var_1.z);
		var_3 = float3(1.000000f,1.000000f,1.000000f);
		var_4 = _make_expr_float2( var_3.yz);
		var_5 = float3(0.000000f,0.000000f,0.000000f);
		var_6 = _make_expr_float2(- var_5.y, var_5.z);
		var_7 = global_var_7afd0ffdef8db69bcbb765a049958c25728f0dd7;
		var_8 = _make_expr_float( var_7.x);
		abs_call_graph_wrapper(global_var_7afd0ffdef8db69bcbb765a049958c25728f0dd7,var_9);
		_subtract_call_graph_wrapper(1.000000f,0.500000f,var_10);
		var_11 = DATA_VERTEX_POSITION;
		var_12 = _make_expr_float2(- var_11.x,- var_11.z);
		var_13 = float3(1.000000f,1.000000f,1.000000f);
		var_14 = _make_expr_float2( var_13.x, var_13.z);
		var_15 = float3(0.000000f,0.000000f,0.000000f);
		var_16 = _make_expr_float2( var_15.x, var_15.z);
		var_17 = global_var_7afd0ffdef8db69bcbb765a049958c25728f0dd7;
		var_18 = _make_expr_float( var_17.y);
		var_19 = DATA_VERTEX_POSITION;
		var_20 = _make_expr_float2( var_19.x,- var_19.y);
		var_21 = float3(1.000000f,1.000000f,1.000000f);
		var_22 = _make_expr_float2( var_21.xy);
		var_23 = float3(0.000000f,0.000000f,0.000000f);
		var_24 = _make_expr_float2(- var_23.x, var_23.y);
		var_25 = global_var_7afd0ffdef8db69bcbb765a049958c25728f0dd7;
		var_26 = _make_expr_float( var_25.z);
		_multiply_call_graph_wrapper(var_2,var_4,var_27);
		sign_call_graph_wrapper(var_8,var_28);
		_multiply_call_graph_wrapper(var_10,5.000000f,var_29);
		_multiply_call_graph_wrapper(var_12,var_14,var_30);
		sign_call_graph_wrapper(var_18,var_31);
		_multiply_call_graph_wrapper(var_20,var_22,var_32);
		sign_call_graph_wrapper(var_26,var_33);
		_add_call_graph_wrapper(var_27,var_6,var_34);
		var_35 = var_28;
		var_36 = _make_expr_float2( var_35.x,1);
		exp_call_graph_wrapper(var_29,var_37);
		_add_call_graph_wrapper(var_30,var_16,var_38);
		var_39 = var_31;
		var_40 = _make_expr_float2( var_39.x,1);
		_add_call_graph_wrapper(var_32,var_24,var_41);
		var_42 = var_33;
		var_43 = _make_expr_float2(1, var_42.x);
		var_44 = var_34;
		var_45 = _make_expr_float2( var_44.xy);
		pow_call_graph_wrapper(var_9,toFloat3(var_37),var_46);
		_dot_product_call_graph_wrapper(var_46,float3(1.000000f,1.000000f,1.000000f),var_47);
		var_48 = var_38;
		var_49 = _make_expr_float2( var_48.xy);
		var_50 = var_41;
		var_51 = _make_expr_float2( var_50.xy);
		_multiply_call_graph_wrapper(var_45,var_36,var_52);
		_divide_call_graph_wrapper(var_46,toFloat3(var_47),var_53);
		_multiply_call_graph_wrapper(var_49,var_40,var_54);
		_multiply_call_graph_wrapper(var_51,var_43,var_55);
		var_56 = TEXTURE(299d546d5ae37f528a6e35a66a9dd0cdeba93bc8, var_52);
		var_57 = TEXTURE(299d546d5ae37f528a6e35a66a9dd0cdeba93bc8, var_54);
		var_58 = TEXTURE(299d546d5ae37f528a6e35a66a9dd0cdeba93bc8, var_55);
		var_59 = var_53;
		var_60 = _make_expr_float( var_59.x);
		var_61 = var_53;
		var_62 = _make_expr_float( var_61.y);
		var_63 = var_53;
		var_64 = _make_expr_float( var_63.z);
		_multiply_call_graph_wrapper(var_56,toFloat4(var_60),var_65);
		_multiply_call_graph_wrapper(var_57,toFloat4(var_62),var_66);
		_multiply_call_graph_wrapper(var_58,toFloat4(var_64),var_67);
		_add_call_graph_wrapper(var_65,var_66,var_68);
		_add_call_graph_wrapper(var_68,var_67,var_69);
		var_70 = var_69;
		var_71 = _make_expr_float3( var_70.xyz);
		_multiply_call_graph_wrapper(toFloat4(var_71),var_af1b2829d2847e875749730efc6f30d667188888,var_72);
		var_73 = toFloat3(var_72);
		
		var_74 = var_3faaa105866f6f4f9c67d41c181297eadd5ff3e1;
		
		var_75 = var_4b93d8479cb2d112283ef34d1b437d234adde333;
		
		OUT_FRAG_ALBEDO = var_73;
		
		OUT_FRAG_METALNESS = var_74;
		
		OUT_FRAG_ROUGHNESS = var_75;
		
		
		
		#ifdef PASS_SHADOW && OPTION_TRANSPARENT
			OUT_FRAG_OPACITY_THRESHOLD = shadow_clip_threshold;
		#endif
		#ifdef PASS_AUXILIARY && (OPTION_TRANSPARENT || ALPHA_TEST)
			OUT_FRAG_OPACITY_THRESHOLD = auxiliary_clip_threshold;
		#endif
		
		#undef NORMAL_TS_UV1
		#undef NORMAL_TS_AUTO
	#}
}
